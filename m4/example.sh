#!/bin/sh

# Simple m4 script that does nothing
m4 example_1.m4

# Force m4 to evaluate expression
m4 example_2.m4

# Define a variable and pass it in via command-line
m4 -D xNAME="Eric" example_3.m4

# Pass in output from other commands as inputs to templates
m4 -D xNAME="$(date)" example_3.m4

# Inline define static variables to avoid duplication
# "dnl" tells m4 to ignore the newline that follows
m4 example_4.m4

# divert macro with negative integer throws away any output that would be 
# generated by the lines that follow it, until restored by a diversion to a 
# positive integer buffer is encountered.

# divert macro with a positive integer places all output generated by the 
# following lines into the output buffer with that number.
m4 -D xGENERATOR=escrivner test.m4

# 1. divert to negative number buffer: ignore/drop
# 2. divert to 1: append
# 3. divert to 2: append
# 4. divert to 0: prepend to before buffer 1
# 5. output in order of increasing integer buffer.
m4 example_6.m4

# if divert(-1) is removed, the empty line (due to line 2 define's new line) is
# included
# Use "esyscmd" (expand to output of system command) macro to capture the output 
# of the date command
# Use "translit" macro to remove newline character after date output to prevent
# double new lines (1 from output and 1 in template "define" line).
m4 example_6.m4

# Assuming we have "test.sh" that generates a list of integers [0..10] with
# newline, "esyscmd" can pipe the output from command as variable value.
m4 example_7.m4
